import tkinter as tk
from tkinter import messagebox
import random

# Initialise score and question counter
score = 0
questions_answered = 0

# Function to ask if the user wants to end the game
def end_game():
    show_receipt()
    root.destroy()  # Close the main application window

# Function to create the main game window
def create_game_window():
    global game_window, score, questions_answered
    score = 0  # Reset score when a new game starts
    questions_answered = 0  # Reset question counter
    game_window = tk.Toplevel(root)
    game_window.title("Maths Game")
    game_window.geometry("400x300")  # Set window size
    game_window.configure(bg='yellow')  # Set background colour to yellow

    tk.Label(game_window, text="Select Difficulty Level:", font=('Calibri', 12, 'bold'), bg='yellow').pack(pady=20)

    # Buttons for selecting difficulty levels
    tk.Button(game_window, text="Easy", command=lambda: start_game("easy"), font=('Calibri', 12, 'bold'), bg='white').pack(pady=10)
    tk.Button(game_window, text="Medium", command=lambda: start_game("medium"), font=('Calibri', 12, 'bold'), bg='white').pack(pady=10)
    tk.Button(game_window, text="Hard", command=lambda: start_game("hard"), font=('Calibri', 12, 'bold'), bg='white').pack(pady=10)

# Function to start the game based on the selected difficulty level
def start_game(level):
    game_window.destroy()
    ask_question(level)

# Function to generate and ask a maths question based on the difficulty level
def ask_question(level):
    global score_label, questions_answered, question_window, submit_button, end_game_button, another_question_button

    if level == "easy":
        num1 = random.randint(1, 10)
        num2 = random.randint(1, 10)
        operation = random.choice(["+", "-"])
    elif level == "medium":
        num1 = random.randint(1, 20)
        num2 = random.randint(1, 20)
        operation = random.choice(["+", "-", "*", "/"])
    else:  # hard level
        num1 = random.randint(1, 100)
        num2 = random.randint(1, 100)
        operation = random.choice(["*", "/"])

    if operation == "/":
        num1 = num1 * num2  # Ensure num1 is divisible by num2
        question = f"{num1} / {num2} = ?"
        correct_answer = num1 / num2
    elif operation == "*":
        question = f"{num1} * {num2} = ?"
        correct_answer = num1 * num2
    elif operation == "+":
        question = f"{num1} + {num2} = ?"
        correct_answer = num1 + num2
    else:  # "-"
        question = f"{num1} - {num2} = ?"
        correct_answer = num1 - num2

    # Create a new window for the question
    question_window = tk.Toplevel(root)
    question_window.title("Maths Question")
    question_window.geometry("400x300")  # Set window size
    question_window.configure(bg='yellow')  # Set background colour to yellow

    tk.Label(question_window, text=question, font=('Calibri', 12, 'bold'), bg='yellow').pack(pady=20)
    answer_entry = tk.Entry(question_window, font=('Calibri', 12, 'bold'))
    answer_entry.pack(pady=10)

    # Label to display the current score in the bottom left
    score_label = tk.Label(question_window, text=f"Score: {score}", font=('Calibri', 12, 'bold'), bg='yellow')
    score_label.pack(side=tk.LEFT, anchor='sw', padx=10, pady=10)

    def update_score():
        score_label.config(text=f"Score: {score}")

    def check_answer():
        global score, questions_answered
        try:
            user_answer = float(answer_entry.get())
            if abs(user_answer - correct_answer) < 1e-5:
                score += 10
                messagebox.showinfo("Result", "Good job, that is right!")
                if score >= 200:
                    win_game(level)
            else:
                score -= 10
                messagebox.showinfo("Result", f"That is incorrect. The correct answer is {correct_answer}.")
                if score <= -100:
                    lose_game(level)
                else:
                    change_difficulty(level)
            questions_answered += 1
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid number.")
            return

        # Update the score displayed
        update_score()

        # Disable the submit button after answering
        submit_button.config(state=tk.DISABLED)
        end_game_button.config(state=tk.NORMAL)
        another_question_button.config(state=tk.NORMAL)

    def win_game(level):
        question_window.destroy()
        win_message = "You win! Your final score is 200."
        messagebox.showinfo("Victory!", win_message)
        end_game()  # Call end_game directly

    def lose_game(level):
        question_window.destroy()
        lose_message = "You lose! Your score is -100."
        messagebox.showinfo("Game Over", lose_message)
        end_game()  # Call end_game directly

    def change_difficulty(level):
        if level == "easy":
            ask_question(level)
        else:
            if messagebox.askyesno("Change Difficulty", "Do you want to switch to an easier difficulty?"):
                if level == "hard":
                    start_game("medium")
                elif level == "medium":
                    start_game("easy")
            else:
                ask_question(level)

    # Define end_game and another_question functions here
    def end_game():
        question_window.destroy()
        show_receipt()

    def another_question():
        question_window.destroy()  # Close the current question window
        ask_question(level)  # Ask another question of the same level

    # Create a frame to hold the buttons and centre them
    button_frame = tk.Frame(question_window, bg='yellow')
    button_frame.pack(pady=10)

    # Create end game and another question buttons
    submit_button = tk.Button(button_frame, text="Submit", command=check_answer, font=('Calibri', 12, 'bold'), bg='white')
    submit_button.pack(side=tk.LEFT, padx=5)

    end_game_button = tk.Button(button_frame, text="End Game", command=end_game, state=tk.NORMAL, font=('Calibri', 12, 'bold'), bg='white')
    end_game_button.pack(side=tk.LEFT, padx=5)

    another_question_button = tk.Button(button_frame, text="Another Question", command=another_question, state=tk.NORMAL, font=('Calibri', 12, 'bold'), bg='white')
    another_question_button.pack(side=tk.LEFT, padx=5)

# Function to show a receipt when the game ends
def show_receipt():
    receipt_message = (
        f"Game Summary:\n\n"
        f"Final Score: {score}\n"
        f"Total Questions Answered: {questions_answered}\n\n"
        "Thank you for playing!"
    )
    messagebox.showinfo("Game Summary", receipt_message)

# Function to validate login credentials
def validate_login():
    username = username_entry.get()
    password = password_entry.get()
    # Dummy validation (replace with actual validation logic)
    if username == "user1234" and password == "password":  # Placeholder
        root.withdraw()  # Hide the main root window
        create_game_window()  # Create the game window
    else:
        messagebox.showerror("Login Error", "Invalid username or password.")

# Main application window
root = tk.Tk()
root.title("Maths Game Login")
root.geometry("300x200")
root.configure(bg='yellow')

tk.Label(root, text="Username:", font=('Calibri', 12, 'bold'), bg='yellow').pack(pady=10)
username_entry = tk.Entry(root, font=('Calibri', 12, 'bold'))
username_entry.pack(pady=5)

tk.Label(root, text="Password:", font=('Calibri', 12, 'bold'), bg='yellow').pack(pady=10)
password_entry = tk.Entry(root, show='*', font=('Calibri', 12, 'bold'))
password_entry.pack(pady=5)

# Create a frame to hold the buttons for login
button_frame = tk.Frame(root, bg='yellow')
button_frame.pack(pady=10)

# Login button
tk.Button(button_frame, text="Login", command=validate_login, font=('Calibri', 12, 'bold'), bg='white').pack(side=tk.LEFT, padx=5)

root.mainloop()
